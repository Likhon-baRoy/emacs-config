#+TITLE: Nick's org-mode config file.
#+OPTIONS: ^:{}

* Nick's Emacs config

I started using emacs when I started learning Clojure using Daniel Higginbotham's book [[http://www.braveclojure.com/][Clojure for the brave and true]].
Initially, I used his stock emacs config file which was great to get started. 
Now, I am trying to learn more emacs-list so I can customize more intelligently and make this thing my own. I love org mode so I will use it to organize my init file as well!
This is heavily based on this [[https://www.youtube.com/watch?v=gRb3bq0NiXY][video]] and the [[https://github.com/danielmai/.emacs.d/blob/master/config.org][github repo]]
Other files I found useful and continue to refer to:
** [[https://github.com/jcf/emacs.d/blob/master/init-packages.org][JCF]]
** [[https://github.com/dvb-industries/.emacs.d/blob/master/package-configuration/clojure.org][Daan van Berkel]]
** [[http://orgmode.org/elpa.html][org plus contrib]] 
This one was giving me problems
** [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]]
This one is what started my obsession with the org config. Still working on the shell scripts to set up the environment. 
** [[https://www.youtube.com/watch?v=2TSKxxYEbII][use-package]]
** [[https://github.com/jkitchin/org-ref][org-ref]]
** [[https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org][org papers]]
research toolkit, very useful
** [[http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html][great org init]]
** help
In the past I have had trouble with misbehaving libraries. I have found that often this is due to byte compilation errors and removing all .elc files seems to fix the problem.
* Personal info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Nick George"
        user-mail-address "nicholas.m.george@ucdenver.edu")
#+END_SRC
* Use-packages
#+BEGIN_SRC emacs-lisp 
        (setq use-package-always-ensure t)
        ;; rainbows
        (use-package rainbow-delimiters
        :defer t)
        ;; s package
        (use-package s)

        (use-package projectile
          :commands (projectile-global-mode
                     projectile-mode)
          :init
          (projectile-global-mode))
  (setq projectile-indexing-method 'native)
      ;; for some reason, org is giving me the problems listed here https://lists.gnu.org/archive/html/emacs-orgmode/2016-02/msg00424.html
      ;; I had to M-x install-package org-plus-contrib to fix it. I havent tried from scratch yet, but hopefully this will work in the future. 
      ;; tried the fix here https://emacs.stackexchange.com/questions/7890/org-plus-contrib-and-org-with-require-or-use-package
  ;; (use-package org
  ;;       :ensure org-plus-contrib)

#+END_SRC
* Theme
** material theme
#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :ensure t
    :defer t)

#+END_SRC
** solarized
#+BEGIN_SRC emacs-lisp 
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+END_SRC

** Leuven theme
#+BEGIN_SRC emacs-lisp 
    (require 'material-theme)
        (use-package leuven-theme
          :ensure t
          :config
          (load-theme 'leuven t))

  ;; fix these in the future. So it switches upon programming mode entry
  ;; (add-hook 'prog-mode-hook
  ;;   (lambda ()
  ;;     (add-hook 'window-configuration-change-hook)
  ;;     '(enable-theme 'material)))

  ;; (add-hook 'org-mode-hook
  ;;   (lambda ()
  ;;     (add-hook 'window-configuration-change-hook)
  ;;     '(enable-theme 'leuven)))

#+END_SRC
** Switch themes
Thank [[Daniel][Daniel!]]

#+BEGIN_SRC emacs-lisp 
  (defun switch-theme (theme)
    "Disables any currently active themes and loads THEME."
    ;; This interactive call is taken from `load-theme'
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapc 'symbol-name
                                     (custom-available-themes))))))
    (let ((enabled-themes custom-enabled-themes))
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme theme t)))

  (defun disable-active-themes ()
    "Disables any currently active themes listed in `custom-enabled-themes'."
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (global-set-key (kbd "C-c t") 'switch-theme)
#+END_SRC 


* open with
open some programs with the system default

#+BEGIN_SRC emacs-lisp 
  (use-package openwith
    :defer t)
  (require 'openwith)
  (setq openwith-associations '(("\\.pptx?\\'" "open" (file))
                                ("\\.docx?\\'" "open" (file))
                                ("\\.xlsx?\\'" "open" (file))))
  (openwith-mode t)
#+END_SRC
* Key bindings and shortcuts
#+BEGIN_SRC emacs-lisp 
  ;; don't pop up font menu
  ;;(global-set-key (kbd "s-t") '(lambda () (interactive)))
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Brandon Rhodes https://github.com/brandon-rhodes/dot-emacs/blob/master/init.el
  (global-set-key [C-tab] 'other-window)
  (global-set-key [C-S-tab] (lambda () (interactive) (other-window -1)))
#+END_SRC
** Find my files quickly

#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-c y") 'kill-buffer-and-window) ;; kill buffer and window is C-c C-k
(global-set-key (kbd "C-c c")'org-capture) ;; start org capture.
(global-set-key (kbd "C-c m") (lambda () (interactive) (find-file "~/Dropbox/orgs/master_agenda.org"))) ;; master agenda in org.
(global-set-key (kbd "C-c i") (lambda () (interactive) (find-file "~/.emacs.d/config.org"))) ;; config file
(global-set-key (kbd "C-c l") (lambda () (interactive) (find-file "~/Dropbox/lab_notebook/lab_notebook.org"))) ;; lab notebook in org.
(global-set-key (kbd "C-c d") (lambda () (interactive) (find-file "~/Dropbox/lab_notebook/data_analysis.org"))) ;; go to data analysis

#+END_SRC

** org mode
#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+END_SRC
From init.el, install the defvar my-packages
* Customize settings 
Set up custom file thing so it writes to its own file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
 (load custom-file)
#+END_SRC
* ui and editing
** UI file

#+BEGIN_SRC emacs-lisp 
;; Turn off the menu bar at the top of each frame because it's distracting
(menu-bar-mode -1)
;; Show line numbers
(global-linum-mode)
;; You can uncomment this to remove the graphical toolbar at the top. After
;; awhile, you won't need the toolbar.
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

;; Don't show native OS scroll bars for buffers because they're redundant
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; increase font size for better readability
(set-face-attribute 'default nil :height 140)

;; frame and window size 
(setq initial-frame-alist '((top . 0) (left . 700) (width . 95) (height . 45)))

;; These settings relate to how emacs interacts with your operating system
(setq ;; makes killing/yanking interact with the clipboard
      x-select-enable-clipboard t

      ;; I'm actually not sure what this does but it's recommended?
      x-select-enable-primary t

      ;; Save clipboard strings into kill ring before replacing them.
      ;; When one selects something in another program to paste it into Emacs,
      ;; but kills something in Emacs before actually pasting it,
      ;; this selection is gone unless this variable is non-nil
      save-interprogram-paste-before-kill t

      ;; Shows all options when running apropos. For more info,
      ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
      apropos-do-all t

      ;; Mouse yank commands yank at point instead of at click.
      mouse-yank-at-point t)

;; No cursor blinking, it's distracting
(blink-cursor-mode 0)

;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; don't pop up font menu
(global-set-key (kbd "s-t") '(lambda () (interactive)))

;; no bell
(setq ring-bell-function 'ignore)
#+END_SRC
** editing file

#+BEGIN_SRC emacs-lisp 
    ;;    (require 'uniquify)
      
    ;; (use-package uniquify
    ;;       :ensure t
    ;;       :config
    ;;       (setq uniquify-buffer-name-style 'forward))

    (setq uniquify-buffer-name-style 'forward)
	  ;; Highlights matching parenthesis
	  (show-paren-mode 1)

	  ;; Highlight current line
	  (global-hl-line-mode 1)

	  ;; Interactive search key bindings. By default, C-s runs
	  ;; isearch-forward, so this swaps the bindings.
	  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
	  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
	  (global-set-key (kbd "C-M-s") 'isearch-forward)
	  (global-set-key (kbd "C-M-r") 'isearch-backward)

	  ;; Don't use hard tabs
	  (setq-default indent-tabs-mode nil)
	  ;; When you visit a file, point goes to the last place where it
	  ;; was when you previously visited the same file.
	  ;; http://www.emacswiki.org/emacs/SavePlace
  ;;        (require 'saveplace)
	(use-package saveplace
	  :config
	  (setq-default save-place t)  
	  (setq save-place-file (concat user-emacs-directory "places")))
	  ;; Emacs can automatically create backup files. This tells Emacs to
	  ;; put all backups in ~/.emacs.d/backups. More info:
	  ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
	  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
							 "backups"))))
	  (setq auto-save-default nil)
	  ;; comments
	  (defun toggle-comment-on-line ()
	    "comment or uncomment current line"
	    (interactive)
	    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
	  (global-set-key (kbd "C-;") 'toggle-comment-on-line)

	  ;; use 2 spaces for tabs
	  (defun die-tabs ()
	    (interactive)
	    (set-variable 'tab-width 2)
	    (mark-whole-buffer)
	    (untabify (region-beginning) (region-end))
	    (keyboard-quit))

	  ;; fix weird os x kill error
	  (defun ns-get-pasteboard ()
	    "Returns the value of the pasteboard, or nil for unsupported formats."
	    (condition-case nil
		(ns-get-selection-internal 'CLIPBOARD)
	      (quit nil)))

	  (setq electric-indent-mode nil)

#+END_SRC
* Buffer stuff
** navigation.el
from my old navigation file
#+BEGIN_SRC emacs-lisp 

      ;; ido-mode allows you to more easily navigate choices. For example,
      ;; when you want to switch buffers, ido presents you with a list
      ;; of buffers in the the mini-buffer. As you start to type a buffer's
      ;; name, ido will narrow down the list of buffers to match the text
      ;; you've typed in
      ;; http://www.emacswiki.org/emacs/InteractivelyDoThings
  ;; use helm
    ;; (use-package ido
    ;;   :config
    ;;   (ido-mode t)
    ;;   :init  
    ;;   (setq 
    ;;    ido-enable-flex-matching t
    ;;    ido-use-filename-at-point nil
    ;;    ido-auto-merge-work-directories-length -1
    ;;    ido-use-virtual-buffers t
    ;;    ido-ubiquitous-mode 1))

      ;; Shows a list of buffers
  (use-package ibuffer
    :commands ibuffer
    :config
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))
    :bind
    ("C-x C-b" . ibuffer))

      ;; Enhances M-x to allow easier execution of commands. Provides
      ;; a filterable list of possible commands in the minibuffer
      ;; http://www.emacswiki.org/emacs/Smex
      (use-package smex
        :bind 
        ("M-x" . smex)
        :config
        (smex-initialize)
        :init
        (setq smex-save-file (concat user-emacs-directory ".smex-items")))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind  (("M-a" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-buffers-list))
    :config (progn
              (setq helm-buffers-fuzzy-matching t)
              (helm-mode 1)))
#+END_SRC


#+BEGIN_SRC emacs-lisp 
  (use-package helm-projectile)
  (helm-projectile-on)
#+END_SRC

#+RESULTS:
| 63 | Commander help buffer. | #[0 \3021 \303!0\202 \210\202 \210r\304!q\210\305c\210	\211\2031 \211@\306\307@A@#c\210A\266\202\202 \210eb\210\310 \210\311p\312"\210)\313 \207 [projectile-commander-help-buffer projectile-commander-methods (error) kill-buffer get-buffer-create Projectile Commander Methods: |


* Recentf

#+BEGIN_SRC emacs-lisp
;;  use recent file stuff
  (use-package recentf
    :bind ("C-x C-r" . helm-recentf)
    :config
    (recentf-mode t)
    (setq recentf-max-saved-items 200))

  ;; recommended from https://www.emacswiki.org/emacs/RecentFiles

;;  (run-at-time nil (* 5 60) 'recentf-save-list)
  (setq create-lockfiles nil) ;; see this https://github.com/syl20bnr/spacemacs/issues/5554
#+END_SRC
* Org mode
Cool! [[https://github.com/xgarrido/emacs-starter-kit/blob/master/starter-kit-org.org][starter guide]]
** org setup
#+BEGIN_SRC emacs-lisp
    ;;(require 'org)
  ;; source editing takes over current window
    (setq org-src-window-setup (quote current-window))
    ;; auto open org files in org mode.
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode)) ;; auto activate org mode for org docs.

    (setq org-startup-with-inline-images t) ;; for inline code images in python

    ;; display preferences from https://www.youtube.com/watch?v=SzA2YODtgK4&t=36s
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "In-progress(ip)" "|" "DONE(d)" "CANCELLED(c)"))))
    ;; log time on finish
    (setq org-log-done 'time)
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "yellow" :weight bold
                   ("In-progress" :foreground "orange" :weight bold)
                   ("DONE" :foreground "green" :weight bold)))))

    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode t)))
    ;; hook for org mode wrap paragraphs
    (add-hook 'org-mode-hook  (lambda () (setq truncate-lines nil)))
    (setq org-agenda-files '("~/Dropbox/orgs/" "~/Dropbox/lab_notebook/"))
  ;; electric pairs rock!
  (add-hook 'org-mode-hook 'electric-pair-mode)
  (use-package org-bullets)
#+END_SRC

** clocking functions
  Super useful [[https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html][guide here]] 
#+BEGIN_SRC emacs-lisp 

;; dealing with time here: https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html
(setq org-clock-idle-time 15)
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Do not prompt to resume an active clock, just resume it
(setq org-clock-persist-query-resume nil)
;; Change tasks to whatever when clocking in
(setq org-clock-in-switch-to-state "NEXT")
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
;; with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
;; use pretty things for the clocktable
(setq org-pretty-entities t)
#+END_SRC

tags
#+BEGIN_SRC emacs-lisp 
(setq org-tags-column 45)
#+END_SRC

** org LaTeX
*** Shell scripts
Requires homebrew
#+BEGIN_SRC bash :results verbatim 
brew install basictex
sudo tlmgr --update self
sudo tlmgr install wrapfig
sudo tlmgr install capt-of
sudo tlmgr install fvextra
sudo tlmgr install ifplatform
sudo tlmgr install xstring
sudo tlmgr install framed
#+END_SRC

*** setup
 See [[http://clarkdonley.com/blog/2014-10-26-org-mode-and-writing-papers-some-tips.html][this link]] for info on writing papers in org and setting things up. 
Because I use pandoc for export, I often have to pass certain command line options. ox-latex provides excellent documentation for this, thought it took me a long time to find [[https://github.com/kawabata/ox-pandoc][here]]
 #+BEGIN_SRC emacs-lisp 
   ;; redundancies with org here...
     (require 'ox-latex)
     (require 'ox-beamer)
         (use-package auctex-latexmk
           :ensure t
           :defer t)

     ;; described here 
       (use-package tex 
         :ensure auctex-latexmk)
       ;; emacs latex customizations

       ;; https://tex.stackexchange.com/questions/21200/auctex-and-xetex


            ;;(setq TeX-PDF-mode t)
       ;; AUCTeX
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq-default TeX-master nil)

       (add-hook 'LaTeX-mode-hook 'visual-line-mode)
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       (setq reftex-plug-into-AUCTeX t)

       (setq TeX-PDF-mode t)

       ;; Automatically activate folding mode in auctex, use C-c C-o C-b to fold.
       (add-hook 'TeX-mode-hook
             (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.

   ;; get rid of temporary files on export
   (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle" "pyg")))
 #+END_SRC
*** FIX NORMAL ORG EXPORT!
make minted work. see
http://orgmode.org/worg/org-dependencies.html
https://emacs.stackexchange.com/questions/27982/export-code-blocks-in-org-mode-with-minted-environment

Find everywhere you are messing with org-export and get rid of em here. Sart vanilla work from there. 
*** Export 
Pandoc is different form the org mode exporter, but I have had better luck with it. See [[https://github.com/kawabata/ox-pandoc][this link]] for better instructions. 
Note, when exporting source code, there is a problem with exporting results. Pandoc ignores the #+RESULTS tag when converting. As a hacky way to address this, I regexp replaced #+RESULTS: with #+RESULTS:\n and it exports ok. Look into fixing this in the future. 
Could be related to [[https://github.com/jgm/pandoc/issues/3477][this issue]] on github
 #+BEGIN_SRC emacs-lisp 
          ;; from https://stackoverflow.com/questions/21005885/export-org-mode-code-block-and-result-with-different-styles
          ;; and this video https://www.youtube.com/watch?v=lsYdK0C2RvQ
      (add-to-list 'exec-path "/usr/local/bin") ;; add pandoc to search path
      (use-package ox-latex)

      (unless (boundp 'org-latex-classes)
        (setq org-latex-classes nil))
      (add-to-list 'org-latex-classes
                   '("article"
                     "\\documentclass{article}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))


      ;; minted for source code minting
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (setq org-latex-listings 'minted)
   ;; breaklines from https://emacs.stackexchange.com/questions/33010/how-to-word-wrap-within-code-blocks
   (setq org-latex-minted-options '(("breaklines" "true")
                                    ("breakanywhere" "true")))

   (setq org-latex-pdf-process
         '("pdflatex -interaction nonstopmode -output-directory %o %f"
           "bibtex %b"
           "pdflatex -interaction nonstopmode -output-directory %o %f"
           "pdflatex -interaction nonstopmode -output-directory %o %f"))
      ;; (use-package ox-pandoc)

      ;; ;; from research toolkit https://raw.githubusercontent.com/vikasrawal/orgpaper/master/research-toolkit.org
      ;; ;; and https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org
          ;; (setq org-latex-pdf-process
          ;;    '("xelatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f")) ;; turned biber to bibtex
 #+END_SRC
*** org ref
For setting up references, I use org-ref combined with pandoc export. slight changes, which are reflected in my shortcut header setup and pandoc options can be changed using #+PANDOC_OPTIONS as described [[https://github.com/kawabata/ox-pandoc][here]]. Note that I cloned [[https://github.com/citation-style-language/styles][the styles]] repository from github and it is located in ~/.emacs.d/styles/
#+BEGIN_SRC emacs-lisp 
  ;; reftex
   (use-package reftex
                :commands turn-on-reftex
                :init
                (progn
                  (setq reftex-default-bibliography '("/Users/Nick/Dropbox/bibliography/library.bib"))
                  (setq reftex-plug-intoAUCTex t))
                )
     (use-package org-ref
         :after org
         :init
         (setq reftex-default-bibliography '("~/Dropbox/bibliography/library.bib"))
         (setq org-ref-default-bibliography '("~/Dropbox/bibliography/library.bib"))
         (setq org-ref-pdf-directory '("~/PDFs")))

        (setq helm-bibtex-bibliography "~/Dropbox/bibliography/library.bib")
        (setq helm-bibtex-library-path "~/PDFs/")

        (setq helm-bibtex-pdf-open-function
              (lambda (fpath)
                 (start-process "open" "*open*" "open" fpath)))

#+END_SRC

** org babel
*** basics
Upon re-installing emacs, I was having problems with a lot of my files. I was getting the Invalid function: org-babel-header-args-safe-fn error and after some experimentation, it turns out it was due to only one language: R. 
After stumbling around for some time, I discovered this [[http://irreal.org/blog/?p=4295][blog]] had the answer. You need to re-byte compile ob-R.el. to do this, M-x RET byte-compile-file <path to file>
In my case, the path is:
~/.emacs.d/elpa/org-plus-contrib-20170515/ob-R.el
No idea why that took me so long to find. 
#+BEGIN_SRC emacs-lisp
  ;; Edit source in current window. 

    ;; export in UTF-8
    (setq org-export-cording-system 'utf-8)
    ;; load common languages
    ;; for some reason, only R gives the header error. I will deal with that later. 
  ;; Ahhh I found the answer to the header problem. 
  ;; check out this website: http://irreal.org/blog/?p=4295

  (org-babel-do-load-languages
           'org-babel-load-languages
           '((python . t) 
             (ipython . t) 
             (clojure . t)
             (R . t) 
             (sh . t)
             (C . t)
             (sqlite . t)
             (latex . t)
             (shell . t)
             (octave . t)
             (matlab . t)
             (org . t)
             (emacs-lisp . t)
             (dot .t)))

  ;; dont evaluate on export
  (setq org-export-babel-evaluate nil)
    ;; dont confirm execute with these languages. 
         (defun my-org-confirm-babel-evaluate (lang body)
           (not (member lang '("octave" "sh" "python" "R" "emacs-lisp" "clojure" "shell" "ipython" "bash"))))
       (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
         ;; inline images-- nevermind this is annoying
         ;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

        ;; format source blocks natively
        ;; from http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)

#+END_SRC

#+RESULTS:
: t
*** clojure setup

Unfortunately, values are returning in the repel following C-x\C-e and not in the document. But I can tangle these files if I want .clj files in the future and this is how I will take notes. 
Setup is that I have to M-x cider-jack-in
Then evaluate with C-x C-e
#+BEGIN_SRC emacs-lisp 
  (use-package cider)
  (setq org-babel-clojure-backend 'cider)

  (org-defkey org-mode-map "\C-c\C-x\C-e" 'cider-eval-last-sexp)
#+END_SRC
*** matlab mode

#+BEGIN_SRC emacs-lisp 
  (use-package matlab-mode
    :ensure t
    :defer t)
#+END_SRC

** org reveal
This is how I will be giving presentations from now on. see [[https://github.com/yjwen/org-reveal][instructions]] on the site. 
#+BEGIN_SRC emacs-lisp 
  (use-package ox-reveal
    :ensure t)
  (setq org-reveal-title-slide "<h1>%t</h1><h4>%a</h4><h4>%e</h4>")
  (setq org-reveal-root "file:///Users/Nick/reveal.js")

#+END_SRC

** org website
for exporting to a certain directory (i.e. for your website, see "Exporting org files" from the [[http://orgmode.org/worg/org-hacks.html][worg blog]] 
Also, this [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][org publish]] tutorial

#+BEGIN_SRC emacs-lisp 
    (use-package tagedit
      :ensure t)
    (require 'ox-publish)
    (use-package emmet-mode
      :ensure t
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
      )
     ;; for html output highlighting
  (use-package htmlize)
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  ;; for static publishing 
  (setq org-publish-project-alist
        '(
          ("projects"
           :base-directory "~/Dropbox/orgs/site/content/projects/"
           :base-extension "org"
           :publishing-directory "~/nickgeorge.net/content/projects/"
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :html-extension "html"
           :body-only t)
          ("about"
           :base-directory "~/Dropbox/orgs/site/content/about/"
           :base-extension "org"
           :publishing-directory "~/nickgeorge.net/content/about/"
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :html-extension "html"
           :body-only t)
          ("blog"
           :base-directory "~/Dropbox/orgs/site/content/blog/"
           :base-extension "org"
           :publishing-directory "~/nickgeorge.net/content/blog/"
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :html-extension "html"
           :body-only t)
          ("notes"
           :base-directory "~/Dropbox/orgs/site/content/notes/"
           :base-extension "org"
           :publishing-directory "~/nickgeorge.net/content/notes/"
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :html-extension "html"
           :body-only t)
          ("static"
           :base-directory "~/Dropbox/orgs/site/static/"
           :base-extension "jpg\\|jpeg\\|png\\|css\\|js\\|pdf"
           :publishing-directory "~/nickgeorge.net/static/"
           :publishing-function org-publish-attachment
           :recursive t)
          ("templates"
           :base-directory "~/Dropbox/orgs/site/templates/"
           :base-extension "html"
           :publishing-directory "~/nickgeorge.net/templates/"
           :publishing-function org-publish-attachment
           :recursive t)
           ("main_app"
           :base-directory "~/Dropbox/orgs/site/"
           :base-extension "py"
           :publishing-directory "~/nickgeorge.net/"
           :publishing-function org-publish-attachment
           )
          ("nick-site" :components ("projects" "about" "blog" "notes" "static" "templates" "main_app"))))

#+END_SRC
* yas snippet
  
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet
    :ensure t)

  (yas-global-mode t)
  (setq yas-trigger-key "<tab>")
#+END_SRC
* python mode
emacs ipython and python mode. 
#+BEGIN_SRC emacs-lisp 
     ;; regular python stuff
     (use-package python-mode
       :defer t
       :ensure t)

  ;; ipython notebooks
     (use-package ein
       :ensure t
       :defer t)

  ;; python environment
  (use-package elpy
    :ensure t
    :init
    (add-hook 'python-mode-hook 'elpy-mode)
    )
  (elpy-enable)

  ;; for org mode
  (use-package ob-ipython
       :ensure t
       :init
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))

  ;; code completion with jedi
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)

   ;; syntax check
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

#+END_SRC


Before using virtual environments, I need to get off the anaconda python distribution. In the meantime, just continue as before. 

#+BEGIN_SRC emacs-lisp 

  (use-package virtualenvwrapper
    :ensure t
    :init
    (venv-initialize-eshell)
    (venv-initialize-interactive-shells))

  ;; show venv in icon when active
  (venv-initialize-eshell)
  (setq-default mode-line-format (cons '(:exec venv-current-name) mode-line-format))
#+END_SRC


interpreter. Try to [[https://github.com/jonathanslenders/ptpython][ptpython]] soon? 
using some [[https://github.com/gregsexton/ob-ipython][ob-ipython]] setup stuff

#+BEGIN_SRC emacs-lisp 
;;    (add-hook 'python-mode-hook 'electric-indent-mode)
    (add-hook 'python-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'python-mode-hook 'electric-pair-mode)
    ;; (add-hook 'python-mode-hook 'jedi:setup)
    ;; (add-hook 'python-mode-hook 'jedi:install-server)
    (setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "--simple-prompt -i")

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

This was created by John Kitchin, super helpful for removing the extra '>>>' prompts in python session results.
link is [[http://kitchingroup.cheme.cmu.edu/blog/2015/03/12/Making-org-mode-Python-sessions-look-better/][here]]
this is interesting, not sure what [[http://kitchingroup.cheme.cmu.edu/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode/][this does]] but it says update all results after running a named block?
#+BEGIN_SRC emacs-lisp 
  (defun org-babel-python-strip-session-chars ()
    "Remove >>> and ... from a Python session output."
    (when (and (string=
                "python"
                (org-element-property :language (org-element-at-point)))
               (string-match
                ":session"
                (org-element-property :parameters (org-element-at-point))))

      (save-excursion
        (when (org-babel-where-is-src-block-result)
          (goto-char (org-babel-where-is-src-block-result))
          (end-of-line 1)
          ;(while (looking-at "[\n\r\t\f ]") (forward-char 1))
          (while (re-search-forward
                  "\\(>>> \\|\\.\\.\\. \\|: $\\|: >>>$\\)"
                  (org-element-property :end (org-element-at-point))
                  t)
            (replace-match "")
            ;; this enables us to get rid of blank lines and blank : >>>
            (beginning-of-line)
            (when (looking-at "^$")
              (kill-line)))))))

  (add-hook 'org-babel-after-execute-hook 'org-babel-python-strip-session-chars)

#+END_SRC

recommended by http://www.jeshamrick.com/2012/09/18/emacs-as-a-python-ide/
#+BEGIN_SRC emacs-lisp 

  ; use IPython
  ;; (setq-default py-shell-name "ipython")
  ;; (setq-default py-which-bufname "IPython")
  ; use the wx backend, for both mayavi and matplotlib
  (setq py-python-command-args
    '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
  ;; (setq py-force-py-shell-name-p t)

  ;; ; switch to the interpreter after executing code
  ;; (setq py-shell-switch-buffers-on-execute-p t)
  ;; (setq py-switch-buffers-on-execute-p t)
  ;; ; don't split windows
  ;; (setq py-split-windows-on-execute-p nil)
  ;; ; try to automagically figure out indentation
  ;; (setq py-smart-indentation t)

#+END_SRC
Below is a fix for a weird error I was getting when I ran ipython. Explained [[https://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline][here]]

#+BEGIN_SRC emacs-lisp 

  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))

#+END_SRC

Format py files on saving. http://docs.astropy.org/en/stable/development/codeguide_emacs.html
#+BEGIN_SRC emacs-lisp 
;; Remove trailing whitespace manually by typing C-t C-w.
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key (kbd "C-t C-w")
                           'delete-trailing-whitespace)))

;; Automatically remove trailing whitespace when file is saved.
(add-hook 'python-mode-hook
      (lambda()
        (add-hook 'local-write-file-hooks
              '(lambda()
                 (save-excursion
                   (delete-trailing-whitespace))))))

;; Use M-SPC (use ALT key) to make sure that words are separated by
;; just one space. Use C-x C-o to collapse a set of empty lines
;; around the cursor to one empty line. Useful for deleting all but
;; one blank line at end of file. To do this go to end of file (M->)
;; and type C-x C-o.
#+END_SRC

* elisp

#+BEGIN_SRC emacs-lisp 
  ;; Automatically load paredit when editing a lisp file
  ;; More at http://www.emacswiki.org/emacs/ParEdit
  (use-package paredit)

  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  ;; eldoc-mode shows documentation in the minibuffer when writing code
  ;; http://www.emacswiki.org/emacs/ElDoc
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

#+END_SRC
* html_nick.el
#+BEGIN_SRC emacs-lisp 
;; setup file for html mode. 
;; added 2017-4-02

(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'html-mode-hook 'emmet-mode)
;;(add-hook 'sgml-mode-hook 'htmld-start)
(add-hook 'html-mode-hook (lambda ()
                            (set (make-local-variable 'sgml-basic-offset) 4)))

(add-hook 'html-mode-hook (lambda ()
                            (set (make-local-variable 'sgml-basic-offset) 4)
                            (sgml-guess-indent)))

(add-to-list 'auto-mode-alist '("\\.css$ . html-mode"))

#+END_SRC
* platformIO

#+BEGIN_SRC emacs-lisp 
  (use-package irony-eldoc)
  (use-package irony) 
  (use-package arduino-mode)
  (add-to-list 'auto-mode-alist '("\\.ino$" . arduino-mode))
  (use-package platformio-mode)

  ;; Enable irony for all c++ files, and platformio-mode only
  ;; when needed (platformio.ini present in project root).
  (add-hook 'c++-mode-hook (lambda ()
                             (irony-mode)
                             (irony-eldoc)
                             (platformio-conditionally-enable)))

  ;; Use irony's completion functions.
  (add-hook 'irony-mode-hook
            (lambda ()
              (define-key irony-mode-map [remap completion-at-point]
                'irony-completion-at-point-async)

              (define-key irony-mode-map [remap complete-symbol]
                'irony-completion-at-point-async)

              (irony-cdb-autosetup-compile-options)))

#+END_SRC

#+RESULTS:

* javascript

#+BEGIN_SRC emacs-lisp 
;; javascript / html
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook 'subword-mode)
(add-hook 'html-mode-hook 'subword-mode)
(setq js-indent-level 2)
(eval-after-load "sgml-mode"
  '(progn
     (require 'tagedit)
     (tagedit-add-paredit-like-keybindings)
     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))


;; coffeescript
(add-to-list 'auto-mode-alist '("\\.coffee.erb$" . coffee-mode))
(add-hook 'coffee-mode-hook 'subword-mode)
(add-hook 'coffee-mode-hook 'highlight-indentation-current-column-mode)
(add-hook 'coffee-mode-hook
          (defun coffee-mode-newline-and-indent ()
            (define-key coffee-mode-map "\C-j" 'coffee-newline-and-indent)
            (setq coffee-cleanup-whitespace nil)))
(custom-set-variables
 '(coffee-tab-width 2))

#+END_SRC
* Magit for git
again need to explore more
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

* shell

customizations for eshell and exec-from-shell
venv and customizations from 
https://www.emacswiki.org/emacs/EshellPrompt
and 
https://github.com/porterjamesj/virtualenvwrapper.el

#+BEGIN_SRC emacs-lisp 
  ;; Sets up exec-path-from shell
  ;; https://github.com/purcell/exec-path-from-shell
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs
     '("PATH")))

  ;; for venv and customizations

  (setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize (eshell/pwd)'face '(:foreground "blue")) " - " venv-current-name " $ ")))
#+END_SRC
** exec from shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+END_SRC
* Clojure mode
** basic setup
Shell scripts to setup basics

#+BEGIN_SRC bash :results verbatim 
brew install leiningen
brew cask install java # need the JDK
#+END_SRC


#+BEGIN_SRC emacs-lisp 
;; key bindings
;; these help me out with the way I usually develop web apps
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(eval-after-load 'cider
  '(progn
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))

#+END_SRC

org babel clojure is not working. I have a hacky fix from [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][here]] that seems to be working for now though. 

#+BEGIN_SRC emacs-lisp 
    ;;;;
    ;; Clojure
    ;;;;
    (use-package clojure-mode
      :ensure t
      :config 
      ;; Enable paredit for Clojure
      (add-hook 'clojure-mode-hook 'enable-paredit-mode)
      ;; This is useful for working with camel-case tokens, like names of
      ;; Java classes (e.g. JavaClassName)
      (add-hook 'clojure-mode-hook 'subword-mode)
      (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
      ;; A little more syntax highlighting
      ;; syntax hilighting for midje
      (add-hook 'clojure-mode-hook
                (lambda ()
                  (setq inferior-lisp-program "lein repl")
                  (font-lock-add-keywords
                   nil
                   '(("(\\(facts?\\)"
                      (1 font-lock-keyword-face))
                     ("(\\(background?\\)"
                      (1 font-lock-keyword-face))))
                  (define-clojure-indent (fact 1))
                  (define-clojure-indent (facts 1))))
      (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode)))
  (use-package clojure-mode-extra-font-locking)

#+END_SRC
** cider

#+BEGIN_SRC emacs-lisp 
  ;;;;
  ;; ;; Cider
  ;; ;;;;
  ;; (use-package cider
  ;;   :ensure t
  ;;   :defer t
  ;;   )

  ;;   ;; provides minibuffer documentation for the code you're typing into the repl
  ;;   (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

  ;;   ;; go right to the REPL buffer when it's finished connecting
  ;;   (setq cider-repl-pop-to-buffer-on-connect t)

  ;;   ;; When there's a cider error, show its buffer and switch to it
  ;;   (setq cider-show-error-buffer t)
  ;;   (setq cider-auto-select-error-buffer t)

  ;;   ;; Where to store the cider history.
  ;;   (setq cider-repl-history-file "~/.emacs.d/cider-history")

  ;;   ;; Wrap when navigating history.
  ;;   (setq cider-repl-wrap-history t)

  ;;   ;; enable paredit in your REPL
     (add-hook 'cider-repl-mode-hook 'paredit-mode)
#+END_SRC
* spelling

shell script for installing ispell dictionary with homebrew:
#+BEGIN_SRC bash :results verbatim 
brew install aspell
#+END_SRC

#+BEGIN_SRC emacs-lisp 
(setq ispell-program-name "/usr/local/bin/aspell")
(global-set-key (kbd "<f2>")'flyspell-auto-correct-word)

;; todo mode hooks. 
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
autoabrev is awesome this list is copied from their website [[https://www.emacswiki.org/emacs/autocorrection_abbrev_defs][here]]
mode is explained [[https://www.emacswiki.org/emacs/AbbrevMode][here]]
#+BEGIN_SRC emacs-lisp 
;; common auto correction like abbrevs
(setq default-abbrev-mode t)
(define-abbrev-table 'global-abbrev-table '(
    ("abbout" "about" nil 0)
    ("abotu" "about" nil 0)
    ("abouta" "about a" nil 0)
    ("aboutit" "about it" nil 0)
    ("aboutthe" "about the" nil 0)
    ("abscence" "absence" nil 0)
    ("accesories" "accessories" nil 0)
    ("accidant" "accident" nil 0)
    ("accomodate" "accommodate" nil 0)
    ("accordingto" "according to" nil 0)
    ("accross" "across" nil 0)
    ("acheive" "achieve" nil 0)
    ("acheived" "achieved" nil 0)
    ("acheiving" "achieving" nil 0)
    ("acn" "can" nil 0)
    ("acommodate" "accommodate" nil 0)
    ("acomodate" "accommodate" nil 0)
    ("acomplished" "accomplished" nil 0)
    ("actualyl" "actually" nil 0)
    ("acurate" "accurate" nil 0)
    ("addictional" "additional" nil 0)
    ("additinal" "additional" nil 0)
    ("addtional" "additional" nil 0)
    ("addtions" "additions" nil 0)
    ("adequit" "adequate" nil 0)
    ("adequite" "adequate" nil 0)
    ("adn" "and" nil 0)
    ("advanage" "advantage" nil 0)
    ("affraid" "afraid" nil 0)
    ("afterthe" "after the" nil 0)
    ("aganist" "against" nil 0)
    ("aggresive" "aggressive" nil 0)
    ("agian" "again" nil 0)
    ("agreemeent" "agreement" nil 0)
    ("agreemeents" "agreements" nil 0)
    ("agreemnet" "agreement" nil 0)
    ("agreemnets" "agreements" nil 0)
    ("agressive" "aggressive" nil 0)
    ("ahppen" "happen" nil 0)
    ("ahve" "have" nil 0)
    ("allwasy" "always" nil 0)
    ("allwyas" "always" nil 0)
    ("almots" "almost" nil 0)
    ("almsot" "almost" nil 0)
    ("alomst" "almost" nil 0)
    ("alot" "a lot" nil 0)
    ("alraedy" "already" nil 0)
    ("alreayd" "already" nil 0)
    ("alreday" "already" nil 0)
    ("alwasy" "always" nil 0)
    ("alwats" "always" nil 0)
    ("alway" "always" nil 0)
    ("alwyas" "always" nil 0)
    ("amde" "made" nil 0)
    ("ameria" "America" nil 0)
    ("amke" "make" nil 0)
    ("amkes" "makes" nil 0)
    ("anbd" "and" nil 0)
    ("andone" "and one" nil 0)
    ("andt he" "and the" nil 0)
    ("andteh" "and the" nil 0)
    ("andthe" "and the" nil 0)
    ("anothe" "another" nil 0)
    ("anual" "annual" nil 0)
    ("apache" "Apache" nil 0)
    ("apparant" "apparent" nil 0)
    ("apparrent" "apparent" nil 0)
    ("appearence" "appearance" nil 0)
    ("appeares" "appears" nil 0)
    ("applicaiton" "application" nil 0)
    ("applicaitons" "applications" nil 0)
    ("applyed" "applied" nil 0)
    ("appointiment" "appointment" nil 0)
    ("approrpiate" "appropriate" nil 0)
    ("approrpriate" "appropriate" nil 0)
    ("aquisition" "acquisition" nil 0)
    ("aquisitions" "acquisitions" nil 0)
    ("arent" "aren't" nil 0)
    ("arguement" "argument" nil 0)
    ("arguements" "arguments" nil 0)
    ("arnt" "aren't" nil 0)
    ("arond" "around" nil 0)
    ("artical" "article" nil 0)
    ("articel" "article" nil 0)
    ("asdvertising" "advertising" nil 0)
    ("assistent" "assistant" nil 0)
    ("asthe" "as the" nil 0)
    ("atention" "attention" nil 0)
    ("atmospher" "atmosphere" nil 0)
    ("attentioin" "attention" nil 0)
    ("atthe" "at the" nil 0)
    ("audeince" "audience" nil 0)
    ("audiance" "audience" nil 0)
    ("authetication" "authentication" nil 0)
    ("availalbe" "available" nil 0)
    ("awya" "away" nil 0)
    ("aywa" "away" nil 0)
    ("bakc" "back" nil 0)
    ("balence" "balance" nil 0)
    ("ballance" "balance" nil 0)
    ("baout" "about" nil 0)
    ("bcak" "back" nil 0)
    ("beacause" "because" nil 0)
    ("beacuse" "because" nil 0)
    ("becasue" "because" nil 0)
    ("becaus" "because" nil 0)
    ("becausea" "because a" nil 0)
    ("becauseof" "because of" nil 0)
    ("becausethe" "because the" nil 0)
    ("becauseyou" "because you" nil 0)
    ("becomeing" "becoming" nil 0)
    ("becomming" "becoming" nil 0)
    ("becuase" "because" nil 0)
    ("becuse" "because" nil 0)
    ("befoer" "before" nil 0)
    ("beggining" "beginning" nil 0)
    ("begining" "beginning" nil 0)
    ("beginining" "beginning" nil 0)
    ("behabviour" "behaviour" nil 0)
    ("behaivior" "behaviour" nil 0)
    ("behavour" "behaviour" nil 0)
    ("beleiev" "believe" nil 0)
    ("beleieve" "believe" nil 0)
    ("beleif" "belief" nil 0)
    ("beleive" "believe" nil 0)
    ("beleived" "believed" nil 0)
    ("beleives" "believes" nil 0)
    ("beliefe" "belief" nil 0)
    ("beliveve" "believe" nil 0)
    ("benifit" "benefit" nil 0)
    ("benifits" "benefits" nil 0)
    ("betwen" "between" nil 0)
    ("beutiful" "beautiful" nil 0)
    ("blase" "blase" nil 0)
    ("boxs" "boxes" nil 0)
    ("brodcast" "broadcast" nil 0)
    ("butthe" "but the" nil 0)
    ("bve" "be" nil 0)
    ("cafe" "cafe" nil 0)
    ("caharcter" "character" nil 0)
    ("calcullated" "calculated" nil 0)
    ("calulated" "calculated" nil 0)
    ("candidtae" "candidate" nil 0)
    ("candidtaes" "candidates" nil 0)
    ("caontains" "contains" nil 0)
    ("capabilites" "capabilities" nil 0)
    ("catagory" "category" nil 0)
    ("categiory" "category" nil 0)
    ("certian" "certain" nil 0)
    ("challange" "challenge" nil 0)
    ("challanges" "challenges" nil 0)
    ("chaneg" "change" nil 0)
    ("chanegs" "changes" nil 0)
    ("changable" "changeable" nil 0)
    ("changeing" "changing" nil 0)
    ("changng" "changing" nil 0)
    ("charachter" "character" nil 0)
    ("charachters" "characters" nil 0)
    ("charactor" "character" nil 0)
    ("charecter" "character" nil 0)
    ("charector" "character" nil 0)
    ("cheif" "chief" nil 0)
    ("chekc" "check" nil 0)
    ("chnage" "change" nil 0)
    ("cieling" "ceiling" nil 0)
    ("circut" "circuit" nil 0)
    ("claer" "clear" nil 0)
    ("claered" "cleared" nil 0)
    ("claerly" "clearly" nil 0)
    ("cliant" "client" nil 0)
    ("cliche" "cliche" nil 0)
    ("cna" "can" nil 0)
    ("colection" "collection" nil 0)
    ("comanies" "companies" nil 0)
    ("comany" "company" nil 0)
    ("comapnies" "companies" nil 0)
    ("comapny" "company" nil 0)
    ("combintation" "combination" nil 0)
    ("comited" "committed" nil 0)
    ("comittee" "committee" nil 0)
    ("commadn" "command" nil 0)
    ("comming" "coming" nil 0)
    ("commitee" "committee" nil 0)
    ("committe" "committee" nil 0)
    ("committment" "commitment" nil 0)
    ("committments" "commitments" nil 0)
    ("committy" "committee" nil 0)
    ("comntain" "contain" nil 0)
    ("comntains" "contains" nil 0)
    ("compair" "compare" nil 0)
    ("compatable" "compatible" nil 0)
    ("compleated" "completed" nil 0)
    ("compleatly" "completely" nil 0)
    ("compleatness" "completeness" nil 0)
    ("completly" "completely" nil 0)
    ("completness" "completeness" nil 0)
    ("complteted" "completed" nil 0)
    ("composate" "composite" nil 0)
    ("compteted" "completed" nil 0)
    ("comtain" "contain" nil 0)
    ("comtains" "contains" nil 0)
    ("comunicate" "communicate" nil 0)
    ("comunity" "community" nil 0)
    ("condersider" "consider" nil 0)
    ("condolances" "condolences" nil 0)
    ("conected" "connected" nil 0)
    ("conferance" "conference" nil 0)
    ("configration" "configuration" nil 0)
    ("confirmmation" "confirmation" nil 0)
    ("conjuntion" "conjunction" nil 0)
    ("considerit" "considerate" nil 0)
    ("considerite" "considerate" nil 0)
    ("consistant" "consistent" nil 0)
    ("consonent" "consonant" nil 0)
    ("conspiricy" "conspiracy" nil 0)
    ("constuction" "construction" nil 0)
    ("consultent" "consultant" nil 0)
    ("consumeable" "consumable" nil 0)
    ("contitions" "conditions" nil 0)
    ("controlable" "controllable" nil 0)
    ("convertable" "convertible" nil 0)
    ("cooparate" "cooperate" nil 0)
    ("cooporate" "cooperate" nil 0)
    ("corproation" "corporation" nil 0)
    ("corproations" "corporations" nil 0)
    ("corrospond" "correspond" nil 0)
    ("corruptable" "corruptible" nil 0)
    ("cotten" "cotton" nil 0)
    ("coudl" "could" nil 0)
    ("coudln" "couldn" nil 0)
    ("coudn" "couldn" nil 0)
    ("couldnt" "couldn't" nil 0)
    ("couldthe" "could the" nil 0)
    ("cpoy" "copy" nil 0)
    ("creme" "creme" nil 0)
    ("ctaegory" "category" nil 0)
    ("cusotmer" "customer" nil 0)
    ("cusotmers" "customers" nil 0)
    ("cutsomer" "customer" nil 0)
    ("cutsomers" "customers" nil 0)
    ("cxan" "can" nil 0)
    ("danceing" "dancing" nil 0)
    ("dcument" "document" nil 0)
    ("deatils" "details" nil 0)
    ("decison" "decision" nil 0)
    ("decisons" "decisions" nil 0)
    ("decor" "decor" nil 0)
    ("defendent" "defendant" nil 0)
    ("definately" "definitely" nil 0)
    ("definded" "defined" nil 0)
    ("dependances" "dependencies" nil 0)
    ("deptartment" "department" nil 0)
    ("desicion" "decision" nil 0)
    ("desicions" "decisions" nil 0)
    ("desision" "decision" nil 0)
    ("desisions" "decisions" nil 0)
    ("detente" "detente" nil 0)
    ("determin" "determine" nil 0)
    ("determins" "determine" nil 0)
    ("develeoprs" "developers" nil 0)
    ("devellop" "develop" nil 0)
    ("develloped" "developed" nil 0)
    ("develloper" "developer" nil 0)
    ("devellopers" "developers" nil 0)
    ("develloping" "developing" nil 0)
    ("devellopment" "development" nil 0)
    ("devellopments" "developments" nil 0)
    ("devellops" "develop" nil 0)
    ("develope" "develop" nil 0)
    ("developement" "development" nil 0)
    ("developements" "developments" nil 0)
    ("developor" "developer" nil 0)
    ("developors" "developers" nil 0)
    ("develpment" "development" nil 0)
    ("devloped" "developed" nil 0)
    ("diaplay" "display" nil 0)
    ("didint" "didn't" nil 0)
    ("didnot" "did not" nil 0)
    ("didnt" "didn't" nil 0)
    ("difefrent" "different" nil 0)
    ("diferences" "differences" nil 0)
    ("differance" "difference" nil 0)
    ("differances" "differences" nil 0)
    ("differant" "different" nil 0)
    ("differemt" "different" nil 0)
    ("differnt" "different" nil 0)
    ("diffrent" "different" nil 0)
    ("directer" "director" nil 0)
    ("directers" "directors" nil 0)
    ("directiosn" "direction" nil 0)
    ("disatisfied" "dissatisfied" nil 0)
    ("discoverd" "discovered" nil 0)
    ("disign" "design" nil 0)
    ("dispaly" "display" nil 0)
    ("dissonent" "dissonant" nil 0)
    ("distribusion" "distribution" nil 0)
    ("distrubution" "distribution" nil 0)
    ("divsion" "division" nil 0)
    ("docuement" "documents" nil 0)
    ("docuemnt" "document" nil 0)
    ("documetn" "document" nil 0)
    ("documnet" "document" nil 0)
    ("documnets" "documents" nil 0)
    ("doese" "does" nil 0)
    ("doesnt" "doesn't" nil 0)
    ("doign" "doing" nil 0)
    ("doimg" "doing" nil 0)
    ("doind" "doing" nil 0)
    ("dollers" "dollars" nil 0)
    ("donig" "doing" nil 0)
    ("dont" "don't" nil 0)
    ("dont" "don't" nil 0)
    ("dosnt" "doesn't" nil 0)
    ("driveing" "driving" nil 0)
    ("drnik" "drink" nil 0)
    ("eclair" "eclair" nil 0)
    ("efel" "feel" nil 0)
    ("effecient" "efficient" nil 0)
    ("efort" "effort" nil 0)
    ("eforts" "efforts" nil 0)
    ("ehr" "her" nil 0)
    ("eligable" "eligible" nil 0)
    ("embarass" "embarrass" nil 0)
    ("emigre" "emigre" nil 0)
    ("enahancements" "enhancements" nil 0)
    ("english" "English" nil 0)
    ("enought" "enough" nil 0)
    ("entree" "entree" nil 0)
    ("equippment" "equipment" nil 0)
    ("equivalant" "equivalent" nil 0)
    ("esle" "else" nil 0)
    ("especally" "especially" nil 0)
    ("especialyl" "especially" nil 0)
    ("espesially" "especially" nil 0)
    ("excellant" "excellent" nil 0)
    ("excercise" "exercise" nil 0)
    ("exchagne" "exchange" nil 0)
    ("exchagnes" "exchanges" nil 0)
    ("excitment" "excitement" nil 0)
    ("exhcange" "exchange" nil 0)
    ("exhcanges" "exchanges" nil 0)
    ("experiance" "experience" nil 0)
    ("experienc" "experience" nil 0)
    ("exprience" "experience" nil 0)
    ("exprienced" "experienced" nil 0)
    ("eyt" "yet" nil 0)
    ("facade" "facade" nil 0)
    ("faeture" "feature" nil 0)
    ("faetures" "features" nil 0)
    ("familair" "familiar" nil 0)
    ("familar" "familiar" nil 0)
    ("familliar" "familiar" nil 0)
    ("fammiliar" "familiar" nil 0)
    ("feild" "field" nil 0)
    ("feilds" "fields" nil 0)
    ("fianlly" "finally" nil 0)
    ("fidn" "find" nil 0)
    ("fifith" "fifth" nil 0)
    ("finalyl" "finally" nil 0)
    ("finnally" "finally" nil 0)
    ("finnish" "finish" nil 0)
    ("firends" "friends" nil 0)
    ("firts" "first" nil 0)
    ("fixit" "fix it" nil 0)
    ("follwo" "follow" nil 0)
    ("follwoing" "following" nil 0)
    ("foloowing" "following" nil 0)
    ("fora" "for a" nil 0)
    ("foriegn" "foreign" nil 0)
    ("forthe" "for the" nil 0)
    ("forwrd" "forward" nil 0)
    ("forwrds" "forwards" nil 0)
    ("foudn" "found" nil 0)
    ("foward" "forward" nil 0)
    ("fowards" "forwards" nil 0)
    ("freind" "friend" nil 0)
    ("freindly" "friendly" nil 0)
    ("freinds" "friends" nil 0)
    ("frmo" "from" nil 0)
    ("fromt he" "from the" nil 0)
    ("fromthe" "from the" nil 0)
    ("furneral" "funeral" nil 0)
    ("fwe" "few" nil 0)
    ("garantee" "guarantee" nil 0)
    ("gaurd" "guard" nil 0)
    ("gemeral" "general" nil 0)
    ("gerat" "great" nil 0)
    ("gerneral" "general" nil 0)
    ("geting" "getting" nil 0)
    ("gettin" "getting" nil 0)
    ("gievn" "given" nil 0)
    ("giveing" "giving" nil 0)
    ("gloabl" "global" nil 0)
    ("goign" "going" nil 0)
    ("gonig" "going" nil 0)
    ("govenment" "government" nil 0)
    ("goverment" "government" nil 0)
    ("gruop" "group" nil 0)
    ("gruops" "groups" nil 0)
    ("grwo" "grow" nil 0)
    ("guidlines" "guidelines" nil 0)
    ("hadbeen" "had been" nil 0)
    ("hadnt" "hadn't" nil 0)
    ("haev" "have" nil 0)
    ("hapen" "happen" nil 0)
    ("hapened" "happened" nil 0)
    ("hapening" "happening" nil 0)
    ("hapens" "happens" nil 0)
    ("happend" "happened" nil 0)
    ("hasbeen" "has been" nil 0)
    ("hasnt" "hasn't" nil 0)
    ("havebeen" "have been" nil 0)
    ("haveing" "having" nil 0)
    ("haven;t" "haven't" nil 0)
    ("hda" "had" nil 0)
    ("hearign" "hearing" nil 0)
    ("heire" "he-ire" nil 0)
    ("helpdesk" "help-desk" nil 0)
    ("helpfull" "helpful" nil 0)
    ("herat" "heart" nil 0)
    ("hesaid" "he said" nil 0)
    ("hewas" "he was" nil 0)
    ("hge" "he" nil 0)
    ("hier" "heir" nil 0)
    ("hismelf" "himself" nil 0)
    ("hiten" "hitting" nil 0)
    ("hitten" "hitting" nil 0)
    ("hlep" "help" nil 0)
    ("howerver" "however" nil 0)
    ("hsa" "has" nil 0)
    ("hsi" "his" nil 0)
    ("hte" "the" nil 0)
    ("htere" "there" nil 0)
    ("htese" "these" nil 0)
    ("htey" "they" nil 0)
    ("hting" "thing" nil 0)
    ("htink" "think" nil 0)
    ("htis" "this" nil 0)
    ("htp:" "http:" nil 0)
    ("http:\\\\" "http:// class="string">" nil 0)
    ("httpL" "http: class="string">" nil 0)
    ("hvae" "have" nil 0)
    ("hvaing" "having" nil 0)
    ("hwich" "which" nil 0)
    ("i" "I" nil 0)
    ("idae" "idea" nil 0)
    ("idaes" "ideas" nil 0)
    ("identifiy" "identify" nil 0)
    ("identofy" "identify" nil 0)
    ("ihs" "his" nil 0)
    ("imediate" "immediate" nil 0)
    ("imediatly" "immediately" nil 0)
    ("immediatly" "immediately" nil 0)
    ("impilies" "implies" nil 0)
    ("implemenation" "implementation" nil 0)
    ("importent" "important" nil 0)
    ("importnat" "important" nil 0)
    ("impossable" "impossible" nil 0)
    ("improvemnt" "improvement" nil 0)
    ("improvment" "improvement" nil 0)
    ("includ" "include" nil 0)
    ("indecate" "indicate" nil 0)
    ("indenpendence" "independence" nil 0)
    ("indenpendent" "independent" nil 0)
    ("indepedent" "independent" nil 0)
    ("independance" "independence" nil 0)
    ("independant" "independent" nil 0)
    ("influance" "influence" nil 0)
    ("infomation" "information" nil 0)
    ("informatoin" "information" nil 0)
    ("inital" "initial" nil 0)
    ("initalization" "initialization" nil 0)
    ("instaleld" "installed" nil 0)
    ("insted" "instead" nil 0)
    ("insurence" "insurance" nil 0)
    ("inteh" "in the" nil 0)
    ("interum" "interim" nil 0)
    ("inthe" "in the" nil 0)
    ("inturn" "in turn" nil 0)
    ("invitaion" "invitation" nil 0)
    ("invstigated" "investigated" nil 0)
    ("inwhich" "in which" nil 0)
    ("isnt" "isn't" nil 0)
    ("isthe" "is the" nil 0)
    ("itis" "it is" nil 0)
    ("ititial" "initial" nil 0)
    ("itll" "it'll" nil 0)
    ("itnerest" "interest" nil 0)
    ("itnerested" "interested" nil 0)
    ("itneresting" "interesting" nil 0)
    ("itnerests" "interests" nil 0)
    ("itwas" "it was" nil 0)
    ("ivestigative" "investigative" nil 0)
    ("iwll" "will" nil 0)
    ("iwth" "with" nil 0)
    ("jsut" "just" nil 0)
    ("jugment" "judgment" nil 0)
    ("knowldge" "knowledge" nil 0)
    ("knowlege" "knowledge" nil 0)
    ("knwo" "know" nil 0)
    ("knwon" "known" nil 0)
    ("knwos" "knows" nil 0)
    ("konw" "know" nil 0)
    ("konwn" "known" nil 0)
    ("konws" "knows" nil 0)
    ("labratory" "laboratory" nil 0)
    ("languange" "language" nil 0)
    ("lastyear" "last year" nil 0)
    ("learnign" "learning" nil 0)
    ("lenght" "length" nil 0)
    ("levle" "level" nil 0)
    ("libary" "library" nil 0)
    ("librarry" "library" nil 0)
    ("librery" "library" nil 0)
    ("liek" "like" nil 0)
    ("liekd" "liked" nil 0)
    ("lieutenent" "lieutenant" nil 0)
    ("liev" "live" nil 0)
    ("likly" "likely" nil 0)
    ("lisense" "license" nil 0)
    ("littel" "little" nil 0)
    ("litttle" "little" nil 0)
    ("liuke" "like" nil 0)
    ("liveing" "living" nil 0)
    ("loev" "love" nil 0)
    ("lonly" "lonely" nil 0)
    ("lookign" "looking" nil 0)
    ("lookup" "look up" nil 0)
    ("maintenence" "maintenance" nil 0)
    ("makeing" "making" nil 0)
    ("managment" "management" nil 0)
    ("mantain" "maintain" nil 0)
    ("marraige" "marriage" nil 0)
    ("memeber" "member" nil 0)
    ("merchent" "merchant" nil 0)
    ("mesage" "message" nil 0)
    ("mesages" "messages" nil 0)
    ("mispell" "misspell" nil 0)
    ("mispelling" "misspelling" nil 0)
    ("mispellings" "misspellings" nil 0)
    ("mkae" "make" nil 0)
    ("mkaes" "makes" nil 0)
    ("mkaing" "making" nil 0)
    ("moeny" "money" nil 0)
    ("morgage" "mortgage" nil 0)
    ("mroe" "more" nil 0)
    ("mysefl" "myself" nil 0)
    ("myu" "my" nil 0)
    ("naive" "naive" nil 0)
    ("necassarily" "necessarily" nil 0)
    ("necassary" "necessary" nil 0)
    ("neccessarily" "necessarily" nil 0)
    ("neccessary" "necessary" nil 0)
    ("necesarily" "necessarily" nil 0)
    ("necesary" "necessary" nil 0)
    ("negotiaing" "negotiating" nil 0)
    ("nkow" "know" nil 0)
    ("nothign" "nothing" nil 0)
    ("nver" "never" nil 0)
    ("nwe" "new" nil 0)
    ("nwo" "now" nil 0)
    ("obediant" "obedient" nil 0)
    ("ocasion" "occasion" nil 0)
    ("occassion" "occasion" nil 0)
    ("occured" "occurred" nil 0)
    ("occurence" "occurrence" nil 0)
    ("occurences" "occurrences" nil 0)
    ("occurrance" "occurrence" nil 0)
    ("ocur" "occur" nil 0)
    ("odbc" "ODBC" nil 0)
    ("oeprator" "operator" nil 0)
    ("ofits" "of its" nil 0)
    ("ofthe" "of the" nil 0)
    ("oging" "going" nil 0)
    ("ohter" "other" nil 0)
    ("omre" "more" nil 0)
    ("oneof" "one of" nil 0)
    ("onepoint" "one point" nil 0)
    ("online" "on-line" nil 0)
    ("ont he" "on the" nil 0)
    ("onthe" "on the" nil 0)
    ("onyl" "only" nil 0)
    ("opcode" "op-code" nil 0)
    ("operaror" "operator" nil 0)
    ("oppasite" "opposite" nil 0)
    ("opperation" "operation" nil 0)
    ("oppertunity" "opportunity" nil 0)
    ("opposate" "opposite" nil 0)
    ("opposible" "opposable" nil 0)
    ("opposit" "opposite" nil 0)
    ("oppotunities" "opportunities" nil 0)
    ("oppotunity" "opportunity" nil 0)
    ("orginization" "organization" nil 0)
    ("orginized" "organized" nil 0)
    ("originial" "original" nil 0)
    ("orignal" "original" nil 0)
    ("otehr" "other" nil 0)
    ("otu" "out" nil 0)
    ("outof" "out of" nil 0)
    ("overthe" "over the" nil 0)
    ("ovverides" "overrides" nil 0)
    ("owrk" "work" nil 0)
    ("owuld" "would" nil 0)
    ("oxident" "oxidant" nil 0)
    ("papaer" "paper" nil 0)
    ("parliment" "parliament" nil 0)
    ("partof" "part of" nil 0)
    ("paticular" "particular" nil 0)
    ("paymetn" "payment" nil 0)
    ("paymetns" "payments" nil 0)
    ("pciture" "picture" nil 0)
    ("peice" "piece" nil 0)
    ("peices" "pieces" nil 0)
    ("peolpe" "people" nil 0)
    ("peopel" "people" nil 0)
    ("percentof" "percent of" nil 0)
    ("percentto" "percent to" nil 0)
    ("performence" "performance" nil 0)
    ("perhasp" "perhaps" nil 0)
    ("perhpas" "perhaps" nil 0)
    ("permanant" "permanent" nil 0)
    ("perminent" "permanent" nil 0)
    ("perscriptions" "prescriptions" nil 0)
    ("personalyl" "personally" nil 0)
    ("pleasent" "pleasant" nil 0)
    ("plugin" "plug-in" nil 0)
    ("poeple" "people" nil 0)
    ("porblem" "problem" nil 0)
    ("porblems" "problems" nil 0)
    ("porvide" "provide" nil 0)
    ("possable" "possible" nil 0)
    ("postition" "position" nil 0)
    ("potentialy" "potentially" nil 0)
    ("prefure" "prefer" nil 0)
    ("pregnent" "pregnant" nil 0)
    ("prelease" "release" nil 0)
    ("prerelease" "pre-release" nil 0)
    ("presance" "presence" nil 0)
    ("privleged" "privileged" nil 0)
    ("probelm" "problem" nil 0)
    ("probelms" "problems" nil 0)
    ("problesm" "problems" nil 0)
    ("proceding" "proceeding" nil 0)
    ("proctetion" "protection" nil 0)
    ("prominant" "prominent" nil 0)
    ("protction" "protection" nil 0)
    ("protoge" "protege" nil 0)
    ("psoition" "position" nil 0)
    ("ptogress" "progress" nil 0)
    ("puting" "putting" nil 0)
    ("pwoer" "power" nil 0)
    ("quater" "quarter" nil 0)
    ("quaters" "quarters" nil 0)
    ("quesion" "question" nil 0)
    ("quesions" "questions" nil 0)
    ("questioms" "questions" nil 0)
    ("questiosn" "questions" nil 0)
    ("questoin" "question" nil 0)
    ("quetion" "question" nil 0)
    ("quetions" "questions" nil 0)
    ("raidus" "RADIUS" nil 0)
    ("realyl" "really" nil 0)
    ("reccomend" "recommend" nil 0)
    ("reccommend" "recommend" nil 0)
    ("receieve" "receive" nil 0)
    ("recieve" "receive" nil 0)
    ("recieved" "received" nil 0)
    ("recieving" "receiving" nil 0)
    ("recomend" "recommend" nil 0)
    ("recomendation" "recommendation" nil 0)
    ("recomendations" "recommendations" nil 0)
    ("recomended" "recommended" nil 0)
    ("recomending" "recommending" nil 0)
    ("reconize" "recognize" nil 0)
    ("recrod" "record" nil 0)
    ("redirector" "re-director" nil 0)
    ("regardsless" "regardless" nil 0)
    ("regession" "regression" nil 0)
    ("regresion" "regression" nil 0)
    ("releated" "related" nil 0)
    ("religous" "religious" nil 0)
    ("relize" "realize" nil 0)
    ("reloacted" "relocated" nil 0)
    ("reltaed" "related" nil 0)
    ("reluctent" "reluctant" nil 0)
    ("remeber" "remember" nil 0)
    ("reommend" "recommend" nil 0)
    ("representativs" "representatives" nil 0)
    ("representives" "representatives" nil 0)
    ("represetned" "represented" nil 0)
    ("represnt" "represent" nil 0)
    ("requirment" "requirement" nil 0)
    ("requirments" "requirements" nil 0)
    ("reserach" "research" nil 0)
    ("resollution" "resolution" nil 0)
    ("resorces" "resources" nil 0)
    ("respomd" "respond" nil 0)
    ("respomse" "response" nil 0)
    ("responce" "response" nil 0)
    ("responsability" "responsibility" nil 0)
    ("responsable" "responsible" nil 0)
    ("responsibile" "responsible" nil 0)
    ("responsiblity" "responsibility" nil 0)
    ("restaraunt" "restaurant" nil 0)
    ("restuarant" "restaurant" nil 0)
    ("reult" "result" nil 0)
    ("reveiw" "review" nil 0)
    ("reveiwing" "reviewing" nil 0)
    ("rumers" "rumors" nil 0)
    ("runnning" "running" nil 0)
    ("rwite" "write" nil 0)
    ("rythm" "rhythm" nil 0)
    ("saidhe" "said he" nil 0)
    ("saidit" "said it" nil 0)
    ("saidthat" "said that" nil 0)
    ("saidthe" "said the" nil 0)
    ("scedule" "schedule" nil 0)
    ("sceduled" "scheduled" nil 0)
    ("scen" "scene" nil 0)
    ("scol" "scowl" nil 0)
    ("scoli" "scowl" nil 0)
    ("seance" "seance" nil 0)
    ("secratary" "secretary" nil 0)
    ("sectino" "section" nil 0)
    ("securtiy" "security" nil 0)
    ("seh" "she" nil 0)
    ("selectoin" "selection" nil 0)
    ("sentance" "sentence" nil 0)
    ("separeate" "separate" nil 0)
    ("seperate" "separate" nil 0)
    ("seperated" "separated" nil 0)
    ("sercumstances" "circumstances" nil 0)
    ("serveral" "several" nil 0)
    ("sez" "says" nil 0)
    ("shcool" "school" nil 0)
    ("shesaid" "she said" nil 0)
    ("shineing" "shining" nil 0)
    ("shiped" "shipped" nil 0)
    ("shoudl" "should" nil 0)
    ("shouldent" "shouldn't" nil 0)
    ("shouldnt" "shouldn't" nil 0)
    ("showinf" "showing" nil 0)
    ("signifacnt" "significant" nil 0)
    ("simalar" "similar" nil 0)
    ("similiar" "similar" nil 0)
    ("simpilified" "simplified" nil 0)
    ("simpyl" "simply" nil 0)
    ("sincerly" "sincerely" nil 0)
    ("sitll" "still" nil 0)
    ("smae" "same" nil 0)
    ("smoe" "some" nil 0)
    ("soem" "some" nil 0)
    ("sohw" "show" nil 0)
    ("soical" "social" nil 0)
    ("somethign" "something" nil 0)
    ("someting" "something" nil 0)
    ("somewaht" "somewhat" nil 0)
    ("somthing" "something" nil 0)
    ("somtimes" "sometimes" nil 0)
    ("soudn" "sound" nil 0)
    ("soudns" "sounds" nil 0)
    ("speach" "speech" nil 0)
    ("specificaly" "specifically" nil 0)
    ("specificalyl" "specifically" nil 0)
    ("statment" "statement" nil 0)
    ("statments" "statements" nil 0)
    ("stnad" "stand" nil 0)
    ("stopry" "story" nil 0)
    ("stoyr" "story" nil 0)
    ("stpo" "stop" nil 0)
    ("strentgh" "strength" nil 0)
    ("stroy" "story" nil 0)
    ("struggel" "struggle" nil 0)
    ("strugle" "struggle" nil 0)
    ("studnet" "student" nil 0)
    ("sublanguange" "sublanguage" nil 0)
    ("substitued" "substituted" nil 0)
    ("successfull" "successful" nil 0)
    ("successfuly" "successfully" nil 0)
    ("successfulyl" "successfully" nil 0)
    ("sucess" "success" nil 0)
    ("sucessfull" "successful" nil 0)
    ("sufficiant" "sufficient" nil 0)
    ("suposed" "supposed" nil 0)
    ("suppossed" "supposed" nil 0)
    ("suprise" "surprise" nil 0)
    ("suprised" "surprised" nil 0)
    ("suprisingly" "surprisingly" nil 0)
    ("swiming" "swimming" nil 0)
    ("tahn" "than" nil 0)
    ("taht" "that" nil 0)
    ("talekd" "talked" nil 0)
    ("talior" "tailor" nil 0)
    ("talkign" "talking" nil 0)
    ("tath" "that" nil 0)
    ("tecnical" "technical" nil 0)
    ("teh" "the" nil 0)
    ("tehy" "they" nil 0)
    ("terminiated" "terminated" nil 0)
    ("termoil" "turmoil" nil 0)
    ("tghe" "the" nil 0)
    ("tghis" "this" nil 0)
    ("thansk" "thanks" nil 0)
    ("thatthe" "that the" nil 0)
    ("thecompany" "the company" nil 0)
    ("thefirst" "the first" nil 0)
    ("thegovernment" "the government" nil 0)
    ("themself" "themselves" nil 0)
    ("themselfs" "themselves" nil 0)
    ("thenew" "the new" nil 0)
    ("theri" "their" nil 0)
    ("thesame" "the same" nil 0)
    ("thetwo" "the two" nil 0)
    ("theyll" "they'll" nil 0)
    ("theyve" "they've" nil 0)
    ("thgat" "that" nil 0)
    ("thge" "the" nil 0)
    ("thier" "their" nil 0)
    ("thier" "their" nil 0)
    ("thigsn" "things" nil 0)
    ("thisyear" "this year" nil 0)
    ("thna" "than" nil 0)
    ("thne" "then" nil 0)
    ("thnig" "thing" nil 0)
    ("thnigs" "things" nil 0)
    ("threatend" "threatened" nil 0)
    ("thsi" "this" nil 0)
    ("thsoe" "those" nil 0)
    ("thta" "that" nil 0)
    ("tihs" "this" nil 0)
    ("timne" "time" nil 0)
    ("tiogether" "together" nil 0)
    ("tje" "the" nil 0)
    ("tjhe" "the" nil 0)
    ("tkae" "take" nil 0)
    ("tkaes" "takes" nil 0)
    ("tkaing" "taking" nil 0)
    ("tlaking" "talking" nil 0)
    ("todya" "today" nil 0)
    ("togehter" "together" nil 0)
    ("tomorow" "tomorrow" nil 0)
    ("tongiht" "tonight" nil 0)
    ("tonihgt" "tonight" nil 0)
    ("totaly" "totally" nil 0)
    ("totalyl" "totally" nil 0)
    ("tothe" "to the" nil 0)
    ("towrad" "toward" nil 0)
    ("traditionalyl" "traditionally" nil 0)
    ("transfered" "transferred" nil 0)
    ("truely" "truly" nil 0)
    ("truley" "truly" nil 0)
    ("tryed" "tried" nil 0)
    ("tthe" "the" nil 0)
    ("tyhat" "that" nil 0)
    ("tyhe" "the" nil 0)
    ("udnerstand" "understand" nil 0)
    ("understnad" "understand" nil 0)
    ("undert he" "under the" nil 0)
    ("unicode" "Unicode" nil 0)
    ("unicode" "Unicode" nil 0)
    ("unitedstates" "United States" nil 0)
    ("unliek" "unlike" nil 0)
    ("unpleasently" "unpleasantly" nil 0)
    ("unregistared" "unregistered" nil 0)
    ("untill" "until" nil 0)
    ("untilll" "until" nil 0)
    ("useing" "using" nil 0)
    ("usualyl" "usually" nil 0)
    ("veyr" "very" nil 0)
    ("virtualyl" "virtually" nil 0)
    ("vrey" "very" nil 0)
    ("vulnerible" "vulnerable" nil 0)
    ("waht" "what" nil 0)
    ("warrent" "warrant" nil 0)
    ("wasnt" "wasn't" nil 0)
    ("watn" "want" nil 0)
    ("wehn" "when" nil 0)
    ("wernt" "weren't" nil 0)
    ("werre" "were" nil 0)
    ("wethee" "whether" nil 0)
    ("whcih" "which" nil 0)
    ("wherre" "where" nil 0)
    ("whic" "which" nil 0)
    ("whihc" "which" nil 0)
    ("whos" "who's" nil 0)
    ("whove" "who've" nil 0)
    ("whta" "what" nil 0)
    ("wief" "wife" nil 0)
    ("wierd" "weird" nil 0)
    ("wihch" "which" nil 0)
    ("wiht" "with" nil 0)
    ("willbe" "will be" nil 0)
    ("windoes" "windows" nil 0)
    ("witha" "with a" nil 0)
    ("withe" "with" nil 0)
    ("withthe" "with the" nil 0)
    ("wiull" "will" nil 0)
    ("wnat" "want" nil 0)
    ("wnated" "wanted" nil 0)
    ("wnats" "wants" nil 0)
    ("woh" "who" nil 0)
    ("wohle" "whole" nil 0)
    ("wokr" "work" nil 0)
    ("woudl" "would" nil 0)
    ("woudln" "wouldn" nil 0)
    ("wouldbe" "would be" nil 0)
    ("wouldnt" "wouldn't" nil 0)
    ("wriet" "write" nil 0)
    ("writting" "writing" nil 0)
    ("wrod" "word" nil 0)
    ("wroet" "wrote" nil 0)
    ("wroking" "working" nil 0)
    ("wtih" "with" nil 0)
    ("wuould" "would" nil 0)
    ("wya" "way" nil 0)
    ("yera" "year" nil 0)
    ("yeras" "years" nil 0)
    ("yersa" "years" nil 0)
    ("yoiu" "you" nil 0)
    ("youare" "you are" nil 0)
    ("youd" "you'd" nil 0)
    ("youre" "you're" nil 0)
    ("youve" "you've" nil 0)
    ("ytou" "you" nil 0)
    ("yuo" "you" nil 0)
    ("yuor" "your" nil 0)
    ))

#+END_SRC
* TODO Ace
AWESOME! check [[http://emacsrocks.com/e10.html][this]] out
** Ace jump
#+BEGIN_SRC emacs-lisp 

  ;; (use-package ace-jump-mode
  ;;   :ensure t
  ;;   :diminish ace-jump-mode
  ;;   :commands ace-jump-mode
  ;;   :bind ("C-S-s" . ace-jump-mode))

#+END_SRC
** Ace window
#+BEGIN_SRC emacs-lisp 
  ;; (use-package ace-window
  ;;   :ensure t
  ;;   :config
  ;;   (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  ;;   (ace-window-display-mode)
  ;;   :bind ("S-o" . ace-window))
#+END_SRC
